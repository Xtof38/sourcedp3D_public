#!/bin/bash

###########################################################################
# This is a script to add a animation in the plot_file used by ddp3D
###########################################################################

# Christophe.martin@grenoble-inp.fr    Feb. 2014

# the name of the file plot_$file2display is the first argument of the command

file2display=`echo $1`

if  [ "$1" = "" ];then
  echo " $0 command usage: animate_my_gif file2display (tstress object, ...)"
  exit
fi
plotfile="plot_$file2display"
plotfile_anim="plot_$file2display"_anim


if  [ -f  $plotfile ];then
 echo "! $0 will modify file $plotfile to get animation synchro with _coord files"
else
 echo "need a $plotfile file generated by ddp3D command first"
 exit
fi


# the number of _coord files imposes the number of frames
number_of_frame=$(ls -1 _coord[0-9][0-9][0-9][0-9] | grep -c .)
if [ $number_of_frame = "0" -o $number_of_frame = "1" ];then
  echo "Not enough _coord files to generate an animated plot"
  exit  
fi

rm -f animated_"$file2display"
cat $plotfile > $plotfile_anim
echo "min_x = GPVAL_X_MIN" >> $plotfile_anim
echo "min_y = GPVAL_Y_MIN" >> $plotfile_anim
echo "max_x = GPVAL_X_MAX" >> $plotfile_anim
echo "max_y = GPVAL_Y_MAX" >> $plotfile_anim
# the number of lines in the file2displau
max_line=$(grep -c . $file2display)

# what type of animation wanted ?
option="none"
#option="progress"
while [ $option != "c" -a  $option != "p" ]; do
echo "Do you want a circle (c) animated on a fixed curve or a curve progressively drawn (p) ?"
read option
done

case $option in 
  "c" )
  echo "delta_frame=($max_line-1)/($number_of_frame-1)" >> $plotfile_anim
  echo "max_line=$max_line" >> $plotfile_anim
  echo "frame=$max_line-($number_of_frame-1)*delta_frame-1" >> $plotfile_anim
  echo "load 'animated_"$file2display"'" >> $plotfile_anim

# preparing the animated_"$file2display" file:
  echo "set xrange [min_x:max_x]" > animated_"$file2display"
  echo "set yrange [min_y:max_y]" >> animated_"$file2display"
  grep "plot .* u (" $plotfile >> animated_"$file2display"
  sed -i 's/^plot/replot/' animated_$file2display

  sed -i 's/title.*/every ::frame::frame pt 7 lc rgb "color2change" ps 4 notitle/g' animated_$file2display
  sed -i '0,/color2change/s/color2change/red/' animated_$file2display
  sed -i '0,/color2change/s/color2change/green/' animated_$file2display
  sed -i '0,/color2change/s/color2change/blue/' animated_$file2display
  sed -i '0,/color2change/s/color2change/violet/' animated_$file2display
  sed -i '0,/color2change/s/color2change/cyan/' animated_$file2display
  sed -i '0,/color2change/s/color2change/brown/' animated_$file2display
  sed -i 's/color2change/black/' animated_$file2display
# the total time should be around 5 sec:
  echo "    mypause=5./($number_of_frame)" >> animated_"$file2display"
  echo "    pause mypause" >> animated_"$file2display"
  echo "    frame=frame+delta_frame" >> animated_"$file2display"
  echo "if (frame<max_line)reread" >> animated_"$file2display"

;;
  "p" )
  let "delta_frame=($max_line)/($number_of_frame-1)"
  echo "delta_frame=($max_line-1)/($number_of_frame-1)" >> $plotfile_anim
  echo "max_line=$max_line" >> $plotfile_anim
  echo "frame=$max_line-($number_of_frame-1)*delta_frame-1" >> $plotfile_anim
  echo "load 'animated_"$file2display"'" >> $plotfile_anim

# preparing the animated_"$file2display" file:
  echo "set xrange [min_x:max_x]" > animated_"$file2display"
  echo "set yrange [min_y:max_y]" >> animated_"$file2display"
  echo "    mypause=5./($number_of_frame)" >> animated_"$file2display"
#grep "plot .* u (" $plotfile >> animated_"$file2display"
#sed -i 's/^replot/plot/' animated_$file2display

  let "i = 0 "
  let "ii = 0"
  until [ "$i" -ge "$max_line" ];do
    let "ii = ii + $delta_frame"
    grep "plot .* u (" $plotfile > tmpgnuplot.tmp
    sed -i "s|$file2display|<(sed -n '"$i","$ii"p' $file2display)|1" tmpgnuplot.tmp
    sed -i 's/title.*/with lines lt 10 lw 4 linecolor rgb "red" notitle/g' tmpgnuplot.tmp
    sed -i 's/^plot/replot/' tmpgnuplot.tmp   
    echo "    pause mypause" >> tmpgnuplot.tmp
    cat tmpgnuplot.tmp >> animated_$file2display
    let "i = i + $delta_frame"
#echo $i $max_line
  done
  sed -i '4,5s/0,/1,/' animated_$file2display
  sed -i '4,4s/replot/plot/' animated_$file2display
#sed -i 's/title.*/every ::frame::frame pt 7 lc rgb "color2change" ps 4 notitle/g' animated_$file2display

esac
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo "! use gp $plotfile_anim command        !"
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
rm -f tmpgnuplot.tmp
