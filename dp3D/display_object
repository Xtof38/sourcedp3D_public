#!/bin/bash

###########################################################################
# This is a script to display colums of the object files in the current 
# directory
###########################################################################

# Christophe.martin@grenoble-inp.fr    November 2006
BINARY_std=$(whereis dp3D | awk '{print $NF}' | rev | sed 's/D3pd//' | rev)
theuser=`whoami`


file2display=object
Option_l="$2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16"
#The number of data columns per object is:
let "numdata=11"
Ynum_kn1=`expr $numdata + 4`

echo "$2" > isbondthere
nisbondthere=`grep -c "\-lastbond"  isbondthere`
rm -f isbondthere
# need a $file2display file in the current directory
if [ -f $file2display ];then
  if [ $nisbondthere = "0" ];then 
    echo "Stresses are shown positive in compression !"
  fi
  echo "Strains are shown positive in compression !"
  numcol=`head -1 $file2display | awk '{print NF }'`
  let "numcol = numcol + 1"  
else
  echo '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'       
  echo "file $file2display does not exist !"
  echo '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'       	 
  exit
fi   
# the old format:
echo "$1" > istimethere
nistimethere=`grep -c "\-time"  istimethere`
rm -f istimethere
if [ $nistimethere != "0" ] || [ "$1" == "-dgeom" ];then
# if mixing  columns of $file2display and visco:
  file2look="tstress"
  case $1 in
  -dgeom )
    Xcol="23"
    file2look="zave"
    ;;	
  -timestep )
    Xcol="5"
    ;;
  -time_s )
    Xcol="6"
    ;;
  -time_h )
    Xcol="7"
    ;;
  -time_y )
    Xcol="8"
    ;;       
  esac
  awk '{print $'$Xcol'}' $file2look > tmp1
  paste $file2display tmp1 > visco$file2display
fi

case $1 in
  -dens )
      Xlabel='"Relative Density "'
      Xcolumn='($1)'
      ;;
  -dgeom )
      Xlabel='"Geometric Relative Density "'
      Xcolumn='($'$numcol')'
      ;;
  -epsx )
      Xlabel='"Strain (x)"'
      Xcolumn='(-$2)'
      ;; 
  -epsy )
      Xlabel='"Strain (y)"'
      Xcolumn='(-$3)'
      ;; 
  -epsz )
      Xlabel='"Strain (z)"'
      Xcolumn='(-$4)'
      ;; 
  -timestep )
      Xlabel='"Timestep "'
      Xcolumn='($'$numcol')'
      ;;
  -time_s )
      Xlabel='"Time (sec) "'
      Xcolumn='($'$numcol')'
      ;;
  -time_h )
      Xlabel='"Time (hour) "'
      Xcolumn='($'$numcol')'
      ;;
  -time_y )
      Xlabel='"Time (year) "'
      Xcolumn='($'$numcol')'
      ;;       
     * )
       echo " $1 is not a valid x label"
       echo " valid x labels are  -dens -dgeom : density / geometric density"
       echo "                     -epsx -epsy -epsz : x y and z strain"
       echo "                     -time_s -time_h -time_y : time in sec, hour or year"              
       echo ""
       echo " valid y labels are  -bonds : Number of bounded contacts to object "
       echo "                     -sigxx -sigyy -sigzz: stress on object"
       echo "                     -forcex -forcey -forcez: force on object"
       exit 
esac
# gnup_display  is the standard view for gnuplot and display_  
cp -f "$BINARY_std"gnup_display plot_$file2display

    echo "set xlabel $Xlabel" >> plot_$file2display
    let "i=0"
    end_option="$1"0


# counting the number of objects in the simulation:
    num_obj=`grep -o forcex object | grep -c forcex`
    echo "$num_obj objects to process"
# with quotes (-Q) one item per line (-1)
# the file to display might be $file2display or visco$file2display
    if [ $nistimethere != "0" ] || [ $1 == "-dgeom" ];then
      ls -1 -Q visco$file2display > tmp1
    else
      ls -1 -Q $file2display > tmp1
    fi
# to look for the first occurence of a nonzero column
    let "done = 0"


    for option in $Option_l
    do
    case $option in
    -bonds )     
      Title_o=Number_of_bounded_contacts_to_object_
      Ylabel='"kb"'
      Ynum=5
      ;;
    -sigxx )     
      Title_o=sig\(xx\)_on_object_
      Ylabel='"Stress (MPa)"'
      Ynum=6
      ;;
    -sigrr )     
      Title_o=sig\(rr\)_on_object_
      Ylabel='"Stress (MPa)"'
      Ynum=6
      ;;
    -forcex )     
      Title_o=x_coordinate_of_the_total_force_on_object_
      Ylabel='"Force (N)"'
      Ynum=7
      ;;
    -sigyy )     
      Title_o=sig\(yy\)_on_object_
      Ylabel='"Stress (MPa)"'
      Ynum=8
      ;;
    -forcey )     
      Title_o=y_coordinate_of_the_total_force_on_object_
      Ylabel='"Force (N)"'
      Ynum=9
      ;;
    -sigzz )     
      Title_o=sig\(zz\)_on_object_
      Ylabel='"Stress (MPa)"'
      Ynum=10
      ;;
    -sigthetar )     
      Title_o=sig\(thetar\)_on_object_
      Ylabel='"Stress (MPa)"'
      Ynum=10
      ;;
    -forcez )     
      Title_o=z_coordinate_of_the_total_force_on_object_
      Ylabel='"Force (N)"'
      Ynum=11
      ;;
    -lastbondx )     
      Title_o=x_coordinate_of_the_last_failed_bond_
      Ylabel='"coordinate (mm)"'
      Ynum=12
      ;;
    -lastbondy )     
      Title_o=y_coordinate_of_the_last_failed_bond_
      Ylabel='"coordinate (mm)"'
      Ynum=13
      ;;
    -lastbondz )     
      Title_o=z_coordinate_of_the_last_failed_bond_
      Ylabel='"coordinate (mm)"'
      Ynum=14
      ;;
    -kn1_obj )     
      Title_o=contacts_with_object
      Ylabel='"number of contacts"'
      Ynum=15
      ;;
    xrange* )
      echo $option > tmp1 
      sed 's/xrange/set xrange /' tmp1 > tmp2
      sed 's/\//\[/' tmp2 > tmp1
      xrange=`sed 's/\//\]/' tmp1`
      sed "s|#set xrange|$xrange|1" plot_$file2display > tmp1
      mv tmp1 plot_$file2display
      plot="no"
      ;;
    yrange* )
      echo $option > tmp1 
      sed 's/yrange/set yrange /' tmp1 > tmp2
      sed 's/\//\[/' tmp2 > tmp1
      yrange=`sed 's/\//\]/' tmp1`
      sed "s|#set yrange|$yrange|1" plot_$file2display > tmp1
      mv tmp1 plot_$file2display
      plot="no"
      ;;
    anim )
      export file2display Xcolumn Ycolumn
      $BINARY_std/animate_my_gif 
      plot="no"
      ;;
     * )
      if [ "$option" = "$end_option" -a $i -gt 0 -o "$option" = "-keep" ];then
# this is the end of the y label list, no more to plot
        gnuplot -geometry 560x400 -persist plot_$file2display 
   
        rm -f tmp1 tmp2 tmp3
       if [ $nistimethere != "0" -a $option != "-keep" ];then
          rm  -f visco$file2display*
        fi
	exit  
      else
       if [ "$option" = "$end_option" ];then
         echo "need a y label"
       else 
         echo "$option is not a valid y label"
       fi
       echo " valid y labels are  -bonds : Number of bounded contacts to object "
       echo "                     -sigxx -sigyy -sigzz: stress on object"
       echo "                     -forcex -forcey -forcez: force on object"
       echo "                     -lastbondx -lastbondy -lastbondz: coord of last failed bond"
       exit       
      fi      
    esac
#   a valid y label has been chosen 
    for ((  ii = 1 ;  ii <= $num_obj;  ii++  ))
    do
    if [ "$plot" != "no" ];then
      let "i+=1"
      num=`expr $Ynum + $ii \* $numdata - $numdata`
      Ycolumn=\(\$"$num"\)
      Title=\"$Title_o$ii\"
# the last y chosen gives the ylabel      
      if [ "$i" = "1" ];then
        echo "set ylabel $Ylabel" >> plot_$file2display
      fi
# by default we do not plot objects for which all fields are zero (no contact)
# it may be plotted by deleting the # in plot_object
      awk '{print $'$num'}' $file2display > tmp3
      if [ "$option" = "-bonds" ];then
        numnonzero=`grep -c -v "0" tmp3`
      else
        numnonzero=`grep -c -v "0.0000E+00" tmp3`
      fi
# the title of the plot is pwd  
      if [ "$i" = "1" ];then
        echo "set title  '"$(pwd)"'" >> plot_$file2display
      fi
# with quotes (-Q) one item per line (-1)
      if [ $numnonzero -gt 1 ];then
        if [ $done -ne 1 ];then
# plot  only for the first line (1,1)
          sed 's/^/plot /g' tmp1 > tmp2
          let "done = 1"
        else
# replot everywhere except for the first line (1,1)
          sed 's/^/replot /g' tmp1 > tmp2
        fi 
# add  " u '$Xcolumn':'$Ycolumn' title "at the end ($) of every line 
        sed 's/$/ u '$Xcolumn':'$Ycolumn' title '$Title'/g' tmp2 > tmp3
# Not the most elegant !:    
        sed 's/_/ /g' tmp3 > tmp2

        sed 's/$/ w l lw 2 /g' tmp2 > tmp3
        cat tmp3 >> plot_$file2display  
      else
        not2plot=`echo $Title | sed 's/_/ /g'`
        echo "Object $ii results in zero value thus ($not2plot not plotted)"
# to know if there has been a contact with the object
        num=`expr $Ynum_kn1 + $ii \* $numdata - $numdata`
        awk '{print $'$num'}' $file2display > tmp3
        numnonzero=`grep -c -v "0" tmp3`
        if [ $numnonzero -gt 1 ];then
          echo ""
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          echo "number of contacts with object $ii is non zero"
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          echo ""
        else
          echo "no contact with this object"
        fi
      fi
    fi    
    done  
    done
